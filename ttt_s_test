#!/bin/bash

# @file ttt_s_test
#
# Tic-Tac-Toe (Naughts and Crosses)
# Tests the string representation of the board
#
# Markers: X: x marker, O: o marker, _: no marker
#
# @date Sept 1, 2020
# @author philip gust
#

# read ttt board definitions
dir=$(dirname "$0")
source "$dir/ttt_board_s"
source "$dir/unit_test"


##
#  Play a game of tic-tac-toe where player X wins.
#
test_X_win() {
	# initialize the board
	local tttBoard=$(initBoard)
	assertStringEqual "$tttBoard" "_________"
	
	# X first move to position 1
	tttBoard="$(markBoard X 1 $tttBoard)"
	assertStringEqual "$tttBoard" "X________"

	# O first move to position 9
	tttBoard="$(markBoard O 9 $tttBoard)"
	assertStringEqual "$tttBoard" "X_______O"

    ### Additional tests here  for X winning game
	# X second move to position 9, whcild should not change the board
	tttBoard="$(markBoard X 9 $tttBoard)"
	assertStringEqual "$tttBoard" "X_______O"

	# X second move to position 2
	tttBoard="$(markBoard X 2 $tttBoard)"
	assertStringEqual "$tttBoard" "XX______O"

	# 0 second move to position 5
	tttBoard="$(markBoard O 5 $tttBoard)"
	assertStringEqual "$tttBoard" "XX__O___O"

	# X third move to position 3
	tttBoard="$(markBoard X 3 $tttBoard)"
	assertStringEqual "$tttBoard" "XXX_O___O"

    # X has won
	hasWon X "$tttBoard"
	assertStatusSuccess

    # O has not won
	hasWon O "$tttBoard"
	assertStatusFailure
}


##
#  Play a game of tic-tac-toe where player O wins.
#
test_O_win() {
    ### tests here  for O winning game
    
    ### remove this line
    #fail
	# initialize the board
	local tttBoard2=$(initBoard)
	assertStringEqual "$tttBoard2" "_________"
	
	# X first move to position 1
	tttBoard2="$(markBoard X 1 $tttBoard2)"
	assertStringEqual "$tttBoard2" "X________"

	# O first move to position 9
	tttBoard2="$(markBoard O 9 $tttBoard2)"
	assertStringEqual "$tttBoard2" "X_______O"

    ### Additional tests here  for X winning game
	# X second move to position 9, whcild should not change the board
	tttBoard2="$(markBoard X 9 $tttBoard2)"
	assertStringEqual "$tttBoard2" "X_______O"

	# X second move to position 2
	tttBoard2="$(markBoard X 2 $tttBoard2)"
	assertStringEqual "$tttBoard2" "XX______O"

	# 0 second move to position 8
	tttBoard2="$(markBoard O 8 $tttBoard2)"
	assertStringEqual "$tttBoard2" "XX_____OO"

	# X third move to position 5
	tttBoard2="$(markBoard X 5 $tttBoard2)"
	assertStringEqual "$tttBoard2" "XX__X__OO"

	# O third move to position 7
	tttBoard2="$(markBoard O 7 $tttBoard2)"
	assertStringEqual "$tttBoard2" "XX__X_OOO"

    # X has won
	hasWon X "$tttBoard2"
	assertStatusFailure

    # O has not won
	hasWon O "$tttBoard2"
	assertStatusSuccess
}

##
#  Play a game of tic-tac-toe where players draw.
#
test_draw() {
    ### tests here  for drawn game
    local tttBoard2=$(initBoard)
	assertStringEqual "$tttBoard2" "_________"
	
	# X first move to position 1
	tttBoard2="$(markBoard X 1 $tttBoard2)"
	assertStringEqual "$tttBoard2" "X________"

	# O first move to position 9
	tttBoard2="$(markBoard O 9 $tttBoard2)"
	assertStringEqual "$tttBoard2" "X_______O"

    ### Additional tests here  for X winning game
	# X second move to position 9, whcild should not change the board
	tttBoard2="$(markBoard X 9 $tttBoard2)"
	assertStringEqual "$tttBoard2" "X_______O"

	# X second move to position 2
	tttBoard2="$(markBoard X 2 $tttBoard2)"
	assertStringEqual "$tttBoard2" "XX______O"

	# 0 second move to position 8
	tttBoard2="$(markBoard O 8 $tttBoard2)"
	assertStringEqual "$tttBoard2" "XX_____OO"

	# X third move to position 5
	tttBoard2="$(markBoard X 5 $tttBoard2)"
	assertStringEqual "$tttBoard2" "XX__X__OO"

	# O third move to position 7
	tttBoard2="$(markBoard O 7 $tttBoard2)"
	assertStringEqual "$tttBoard2" "XX__X_OOO"
    ### remove this line
    #fail
	displayBoard $tttBoard2
}

# run unit tests for X win, O win, and draw
runUnitTest test_X_win
runUnitTest test_O_win
runUnitTest test_draw

# show unit test summary
unitTestSummary
