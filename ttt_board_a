#!/bin/bash

# @file ttt_board_a
#
# Defines board functions for tic-tac-toe (naughts and crosses)
# This implementation uses an array to represent the board
#
# @date Sept 1, 2020
# @author philip gust
#

##
#  Initialize empty board.
#
#  @param board reference to the board
#
initBoard() {
    ### your code here
    declare -n board=$1
    board=( _ _ _ _ _ _ _ _ _ )
}

##
#  Mark the board position with the marker of a player (X or O).
#
#  @param marker the marker for a player (X or O)
#  @param bpos the row major position on the board (1-9)
#  @param reference to the board
#  @return 0 if board position marked, 1 if cannot mark position
#
markBoard() {
    ### your code here
    marker=$1
    bpos=$2
    declare -n reference=$3
    idx=$(( $bpos - 1 ))

    # if $bpos > 9 || < 1 echo "invalid position"
    if ((bpos < 1 || bpos > 9)); then
      echo ${board}
      return 1
    fi

    if [ ${reference[$idx]} == "_" ]; then
      reference[$idx]=$marker
      #echo $reference #为什么这行不返回也可以？是因为在前面declare了吗？
      return 0
      
    else  
      #echo $reference
      return 1
    fi

}

##
#  Determines whether given marker has won. Only if
#  marker has three columns in row or three rows in
#  column, or all in one of the two diagonals.
#
#  @param marker the X or O marker
#  @param reference to the board
#  @return 0 if marker has won, 1 otherwise.
#
hasWon() {
    ### your code here
    marker=$1
    declare -n reference=$2

    if [ ${reference[0]} == $marker ] && [ ${reference[1]} == $marker ] && [ ${reference[2]} == $marker ]; then
      return 0
      echo success
    elif [ ${reference[3]} == $marker ] && [ ${reference[4]} == $marker ] && [ ${reference[5]} == $marker ]; then
      return 0
      echo success
    elif [ ${reference[6]} == $marker ] && [ ${reference[7]} == $marker ] && [ ${reference[8]} == $marker ]; then
      return 0
      echo success
    elif [ ${reference[0]} == $marker ] && [ ${reference[3]} == $marker ] && [ ${reference[6]} == $marker ]; then
      return 0
      echo success
    elif [ ${reference[1]} == $marker ] && [ ${reference[4]} == $marker ] && [ ${reference[7]} == $marker ]; then
      return 0
      echo success
    elif [ ${reference[2]} == $marker ] && [ ${reference[5]} == $marker ] && [ ${reference[8]} == $marker ]; then
      return 0
      echo success
    elif [ ${reference[0]} == $marker ] && [ ${reference[4]} == $marker ] && [ ${reference[8]} == $marker ]; then
      return 0
      echo success
    elif [ ${reference[2]} == $marker ] && [ ${reference[4]} == $marker ] && [ ${reference[6]} == $marker ]; then
      return 0
      echo success   
    else
      return 1
      echo fail
    fi
}

##
#  Display the board.
#
#  @param reference to the board
#
displayBoard() {
    ### your code here
    declare -n reference=$1
    boundry="-------------"

    if [ ${reference[0]} == "_" ]; then pos0="1"; else pos0="${reference[0]}"; fi
    if [ ${reference[1]} == "_" ]; then pos1="2"; else pos1="${reference[1]}"; fi
    if [ ${reference[2]} == "_" ]; then pos2="3"; else pos2="${reference[2]}"; fi
    if [ ${reference[3]} == "_" ]; then pos3="4"; else pos3="${reference[3]}"; fi
    if [ ${reference[4]} == "_" ]; then pos4="5"; else pos4="${reference[4]}"; fi
    if [ ${reference[5]} == "_" ]; then pos5="6"; else pos5="${reference[5]}"; fi
    if [ ${reference[6]} == "_" ]; then pos6="7"; else pos6="${reference[6]}"; fi
    if [ ${reference[7]} == "_" ]; then pos7="8"; else pos7="${reference[7]}"; fi
    if [ ${reference[8]} == "_" ]; then pos8="9"; else pos8="${reference[8]}"; fi
    
    printf "%s\n" $boundry
    echo "| $pos0 | $pos1 | $pos2"
    printf "%s\n" $boundry
    echo "| $pos3 | $pos4 | $pos5"
    printf "%s\n" $boundry
    echo "| $pos6 | $pos7 | $pos8"
    printf "%s\n" $boundry
}
